import javax.swing.*;
import java.awt.*;
import java.util.Arrays;

public class Buchstabengitter {
    static JFrame frame = new JFrame();
    static JTextField rows, columns, buchstaben, answerWords;
    static String[] buchstabenGitter, answers;

    public static void main(String[] args) {
        CreateUI();
    }

    static void CreateUI(){
        JLabel infos = new JLabel("Trage die Anzahl an Reihen und Spalten ein! Danach trage die " +
                "Buchstaben des Gitters mit einem Leerzeichen getrennt von links nach rechts ein");
        rows = new JTextField("Anzahl Reihen (horizontal)");
        columns = new JTextField("Anzahl Buchstaben in einer Reihe");
        buchstaben = new JTextField("Trage hier die Buchstaben ein");
        answerWords = new JTextField("Trage hier die zu findenden WÃ¶rter ein");
        JButton confirmInput = new JButton("START");
        confirmInput.addActionListener(ev->{
            ProgrammStart();
        });
        JPanel usual = new JPanel(new GridLayout(5, 1)),
                columnRowInput = new JPanel(new GridLayout(1, 2));
        //columnRowInput.add(rows);
        columnRowInput.add(columns);
        usual.add(infos);
        usual.add(columnRowInput);
        usual.add(buchstaben);
        usual.add(answerWords);
        usual.add(confirmInput);
        frame.add(usual);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
    static void ProgrammStart(){
        InputToArray();
        FindFirstChar();
    }

    static void InputToArray(){
        buchstabenGitter = buchstaben.getText().split(" ");
        answers = answerWords.getText().split(" ");
    }

    static void FindFirstChar(){
        for (int i = 0; i < answers.length; i++) {
            String[] answer = answers[i].split("");
            for (int j = 0; j < buchstabenGitter.length; j++) {
                if (buchstabenGitter[j].equals(answer[0])) {
                    CheckIfWordComplete(j, answer);
                }
            }
        }
    }

    static void CheckIfWordComplete(int stelleImArray, String[] gesuchtesWort){
        int direction = 1, j = 0, charsPerRow = Integer.parseInt(columns.getText());
        int[] buchstabenVonAnswer = new int[gesuchtesWort.length];
        Arrays.fill(buchstabenVonAnswer, -1);
        while(true){
            for (int i = 0; i < gesuchtesWort.length && stelleImArray + i < buchstabenGitter.length; i += direction) {
                if (gesuchtesWort[j].equals(buchstabenGitter[stelleImArray + i])) {
                    buchstabenVonAnswer[j] = stelleImArray + i;
                    if (buchstabenVonAnswer[buchstabenVonAnswer.length - 1] != -1) {
                        FoundWord(buchstabenVonAnswer);
                    }
                }
                j++;
            }
            if (direction == 1) {
                direction = charsPerRow;
            } else if (direction == charsPerRow) {
                direction = charsPerRow + 1;
            } else if (direction == charsPerRow + 1) {
                break;
            }
        }
    }

    static void FoundWord(int[] stellenImArray){
        System.out.println(Arrays.toString(stellenImArray));
        for (int j : stellenImArray) {
            System.out.println(buchstabenGitter[j]);
        }
    }
}
/*z p p g d u o a m a n g a n g y l r a h a c s n e o n s a h e u o c b b r t e c h n e t d b t m h k c t m h w c s f n y l o e z r a r f s k f b d f te n t b b a c t i t a n l l t i d e p t o d w f a a u u r h z c o r n r o i i u d p o i l r u l w h p l n n r a t r l z j r o s d m e i t n e r n h i f f n m n e p t u n b n y b n r z g o l d u j c l e t e r n a f b c h l o r v e j h u o h n l z j y e v o a r g o n m z c m u a s t a t d n c r i n
*/
