import javax.swing.*;
import java.awt.*;
import java.util.concurrent.TimeUnit;

class VierGewinnt{
    JFrame frame = new JFrame("Vier Gewinnt");
    JPanel feld = new JPanel(new GridLayout(VierGewinnt.reihen, 1));
    Spieler[] alleSpieler;
    Spielfeld spielfeld;
    Spieler amZug;
    JButton[][] buttons;
    static int reihen = 7, spalten = 6;
    Color playerOne, playerTwo;
    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    Dimension minSize = new Dimension(screenSize.height, screenSize.height);
    int step = VierGewinnt.reihen - 1;

    VierGewinnt(){
        buttons = new JButton[VierGewinnt.reihen][VierGewinnt.spalten];
        playerOne = Color.red;
        playerTwo = Color.yellow;
        alleSpieler = new Spieler[]{new Spieler(playerOne), new Spieler(playerTwo)};
        amZug = alleSpieler[0];
        spielfeld = new Spielfeld();
        CreateUi();
    }

    public static void main( String[ ] args ) {
        new VierGewinnt();
    }

    void CreateUi(){
        for (int i = 0; i < VierGewinnt.reihen; i++) {
            for (int j = 0; j < VierGewinnt.spalten; j++) {
                JButton button = new JButton();
                button.setBackground(new Color(0xFFFFFF));
                int finalI = i;
                int finalJ = j;
                button.addActionListener((ev)->{
                    System.out.println("Reihe: " + finalI + "\nSpalte: " + finalJ);
                    ButtonKlick(finalI, finalJ);
                });
                button.setRolloverEnabled(false);
                buttons[i][j] = button;
                feld.add(button);
            }
        }
        frame.add(feld);
        frame.setSize(minSize);
        frame.setLocationRelativeTo(null);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
    void ButtonKlick(int reihe, int spalte){
        int height = GetPlacementHeight(spalte);
        if (height == -1)return;
        SetFeldOccupied(height, spalte);
        //Animation(height, spalte);
        CheckWinner(height, spalte);
        SwitchPlayer();
    }

    int GetPlacementHeight(int spalte){
        for (int i = VierGewinnt.reihen - 1; i >= 0; i--) {
            if (spielfeld.felderDesFelds[i][spalte].belegung == null) {
                return i;
            }
        }
        return -1;
    }

    void SetFeldOccupied(int reihe, int spalte){
        spielfeld.felderDesFelds[reihe][spalte].belegung = amZug;
        buttons[reihe][spalte].setBackground(amZug.farbe);
//        for (int i = VierGewinnt.reihen - 1; i >= reihe; i--) {
//            buttons[i][spalte].setBackground(amZug.farbe);
//            try {
//                TimeUnit.MILLISECONDS.sleep(500);
//            }catch (Exception e){
//                System.out.println("No timer :(");
//            }
//        }
    }

    /**
     * Soll das Fallen animieren
     * @param reihe
     * @param spalte
     */
    void Animation(int reihe, int spalte){
        spielfeld.felderDesFelds[reihe][spalte].belegung = amZug;
        if (step >= reihe) {
            buttons[step][spalte].setBackground(amZug.farbe);
            try {
                TimeUnit.MILLISECONDS.sleep(1000);
            }catch (Exception e){
                System.out.println("No timer :(");
            }
            step--;
            Animation(reihe, spalte);
        }else{
            step = VierGewinnt.reihen - 1;
        }
    }
    void SwitchPlayer(){
        if (amZug == alleSpieler[0]) {
            amZug = alleSpieler[1];
        }else if (amZug == alleSpieler[1]) {
            amZug = alleSpieler[0];
        }
    }

    /**
     * Sucht nach 4 gleich belegten Feldern in einer Reihe. Wenn 4 in einer Reihe sind, wird GameOver aufgerufen
     * @param reihen Reihe des geklickten Felds
     * @param spalten Spalte des geklickten Felds
     */
    void CheckWinner(int reihen, int spalten) {
        int[][][] steps = new int[][][]{{{1, 1}, {-1, -1}}, {{-1, 1}, {1, -1}}, {{0, 1}, {0, -1}}, {{1, 0}, {-1, 0}}};
        int reihenDirection, spaltenDirection, combo = 0;
        for (int z = 0; z < steps.length; z++) {
            for (int i = 0; i < steps[z].length; i++) {
                reihenDirection = steps[z][i][0];
                spaltenDirection = steps[z][i][1];
                for (int j = 0; j < 4; j++) {
                    if (reihen + (j * reihenDirection) < 0 || reihen + (j * reihenDirection) >= VierGewinnt.reihen || spalten + (j * spaltenDirection) < 0 || spalten + (j * spaltenDirection) >= VierGewinnt.spalten) {
                        //wenn Feld nicht im Spielfeld skip es
                        break;
                    }
                    try {
                        if (spielfeld.felderDesFelds[reihen + (j * reihenDirection)][spalten + (j * spaltenDirection)].belegung.equals(amZug)) {
                            combo++;
                        } else {
                            break;
                        }
                    } catch (Exception e) {
                        break;
                    }
                    if (combo == 5) {
                        GameOver(amZug.farbe);
                    }
                }
            }
            combo = 0;
        }
    }

    /**
     * Erstellt einen neuen Frame, in dem angezeigt wird, wer gewonnen hat
     * @param winnersColor Die Farbe des Spielers, der gewonnen hat
     */
    void GameOver(Color winnersColor){
        feld.setVisible(false);
        JButton wButton = new JButton("Winner");
        frame.add(wButton);
        wButton.setBackground(winnersColor);
/*
        try {
            TimeUnit.SECONDS.sleep(50);
        }catch (Exception _){}
        System.exit(0);
*/
    }
}
